def count_inversions(lst):
    count = 0
    if len(lst) > 1:
        mid = len(lst) // 2
        left_half = lst[:mid]
        right_half = lst[mid:]

        count += count_inversions(left_half)
        count += count_inversions(right_half)

        i = j = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] <= right_half[j]:
                i += 1
            else:
                count += len(left_half) - i
                j += 1

        lst[:] = sorted(lst)
    return count



var lst <- [1,2,3,4,5];
var count <- 0;

if lst.len > 1 then
    mid <- lst.len // 2;
    var left_half <- [];
    var right_half <- [];
    var i <- 0;
    while i<mid do
        left_half.push lst.at i;
        i <- i + 1;
    endwhile;
    while i < lst.len do
        right_half <-